apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        jar(MavenPublication) {
            from components.java
        }
        all {
            pom {
                url = 'https://github.com/xenit-eu/alfresco-remote-api-clients'
                name = project.name
                description = project.description

                scm {
                    connection = 'scm:git:git@github.com:xenit-eu/alfresco-remote-api-clients.git'
                    developerConnection = 'scm:git:git@github.com:xenit-eu/alfresco-remote-api-clients.git'
                    url = 'https://github.com/xenit-eu/alfresco-remote-api-clients.git'
                }
                developers {
                    developer {
                        id = "xenit"
                        name = "Xenit Solutions NV"
                    }
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.toString().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = project.findProperty('sonatype_username')
                password = project.findProperty('sonatype_password')
            }
        }
    }
}

signing {
    required { !version.toString().endsWith("SNAPSHOT") }
    useInMemoryPgpKeys(findProperty("signingKeyId"), findProperty("signingKey"), findProperty("signingPassword"))
    sign publishing.publications
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(publish)) {
        if (!project.hasProperty('keyId') || !project.hasProperty('secretKeyRingFile') || !project.hasProperty('password')) {
            throw new GradleException('You need to provide signing params in order to sign artifacts')
        }

        def id = project.hasProperty('keyId') ? project.keyId : ''
        def file = project.hasProperty('secretKeyRingFile') ? project.secretKeyRingFile : ''
        def password = project.hasProperty('password') ? project.password : ''

        ext."signing.keyId" = id
        ext."signing.secretKeyRingFile" = file
        ext."signing.password" = password
    }
}